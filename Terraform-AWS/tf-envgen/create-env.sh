#!/bin/bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TERRAFORM_DIR="${SCRIPT_DIR}"
TFVARS_FILE="${TERRAFORM_DIR}/terraform.tfvars"

# Default values
DEFAULT_TTL=4
DEFAULT_LOCATION="westeurope"
DEFAULT_OWNER="${USER}@company.com"

# Functions
print_banner() {
    echo -e "${BLUE}"
    cat << "EOF"
  ____  __ __  ___ ___    ___  ____       __    __   ____  _____ ____   __  ______      __ __    ___  ____     ___     
 /    ||  |  ||   |   |  /  _]|    \     |  |__|  | /    |/ ___/|    \ |  ||      |    |  |  |  /  _]|    \   /  _]    
|  o  ||  |  || _   _ | /  [_ |  _  |    |  |  |  ||  o  (   \_ |  _  ||_ ||      |    |  |  | /  [_ |  D  ) /  [_     
|     ||  ~  ||  \_/  ||    _]|  |  |    |  |  |  ||     |\__  ||  |  |  \||_|  |_|    |  _  ||    _]|    / |    _]    
|  _  ||___, ||   |   ||   [_ |  |  |    |  `  '  ||  _  |/  \ ||  |  |      |  |      |  |  ||   [_ |    \ |   [_  __ 
|  |  ||     ||   |   ||     ||  |  |     \      / |  |  |\    ||  |  |      |  |      |  |  ||     ||  .  \|     ||  |
|__|__||____/ |___|___||_____||__|__|      \_/\_/  |__|__| \___||__|__|      |__|      |__|__||_____||__|\_||_____||__|
                                                                                                                       
EOF
    echo -e "${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

show_usage() {
    cat << EOF
Usage: $0 --name <env-name> [OPTIONS]

Create an ephemeral environment with automatic TTL-based deletion.

Required:
  --name <name>              Environment name (e.g., feature-123, demo-client)

Optional:
  --ttl <hours>              Time-to-live in hours (default: ${DEFAULT_TTL})
  --owner <email>            Owner email (default: ${DEFAULT_OWNER})
  --location <region>        Azure region (default: ${DEFAULT_LOCATION})
  --enable-database          Enable PostgreSQL database (default: true)
  --enable-app-service       Enable App Service (default: true)
  --enable-acr               Enable Azure Container Registry (default: false)
  --docker-image <image>     Docker image for app service (default: nginx)
  --docker-tag <tag>         Docker image tag (default: latest)
  --cost-center <center>     Cost center for billing (default: ephemeral-environments)
  --no-database              Disable database creation
  --no-app-service           Disable app service creation
  --skip-plan                Skip terraform plan, go straight to apply
  --auto-approve             Auto-approve terraform apply
  --destroy                  Destroy the environment instead of creating it
  -h, --help                 Show this help message

Examples:
  # Create a basic environment with 4 hour TTL
  $0 --name feature-123

  # Create environment with 8 hour TTL and custom owner
  $0 --name demo-client --ttl 8 --owner aymen@company.com

  # Create minimal environment (no database)
  $0 --name test-api --no-database

  # Destroy an environment
  $0 --name feature-123 --destroy

EOF
    exit 1
}

check_prerequisites() {
    print_info "Checking prerequisites..."
    
    # Check if terraform is installed
    if ! command -v terraform &> /dev/null; then
        print_error "Terraform is not installed. Please install it first."
        exit 1
    fi
    
    # Check if az cli is installed
    if ! command -v az &> /dev/null; then
        print_error "Azure CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check if logged into Azure
    if ! az account show &> /dev/null; then
        print_error "Not logged into Azure. Please run 'az login' first."
        exit 1
    fi
    
    print_success "All prerequisites met"
}

init_terraform() {
    print_info "Initializing Terraform..."
    cd "${TERRAFORM_DIR}"
    
    if terraform init -upgrade > /dev/null 2>&1; then
        print_success "Terraform initialized"
    else
        print_error "Failed to initialize Terraform"
        exit 1
    fi
}

create_tfvars() {
    local env_name="$1"
    local ttl="$2"
    local owner="$3"
    local location="$4"
    local enable_db="$5"
    local enable_app="$6"
    local enable_acr="$7"
    local docker_image="$8"
    local docker_tag="$9"
    local cost_center="${10}"
    
    print_info "Creating terraform.tfvars..."
    
    cat > "${TFVARS_FILE}" << EOF
# Auto-generated by create-env.sh
# Created: $(date)

environment_name = "${env_name}"
ttl_hours        = ${ttl}
owner            = "${owner}"
location         = "${location}"
cost_center      = "${cost_center}"

# Feature flags
enable_database          = ${enable_db}
enable_app_service       = ${enable_app}
enable_container_registry = ${enable_acr}

# App configuration
app_docker_image = "${docker_image}"
app_docker_tag   = "${docker_tag}"

# Tags
tags = {
  Purpose     = "Ephemeral Environment"
  CreatedBy   = "create-env.sh"
  Script      = "automated"
}
EOF
    
    print_success "Configuration file created"
}

run_terraform_plan() {
    print_info "Running Terraform plan..."
    echo ""
    
    if terraform plan -out=tfplan; then
        print_success "Plan completed successfully"
        echo ""
        return 0
    else
        print_error "Plan failed"
        return 1
    fi
}

run_terraform_apply() {
    local auto_approve="$1"
    
    print_info "Applying Terraform configuration..."
    echo ""
    
    if [ "$auto_approve" = true ]; then
        if terraform apply -auto-approve tfplan; then
            print_success "Environment created successfully"
            return 0
        else
            print_error "Apply failed"
            return 1
        fi
    else
        if terraform apply tfplan; then
            print_success "Environment created successfully"
            return 0
        else
            print_error "Apply failed"
            return 1
        fi
    fi
}

run_terraform_destroy() {
    local env_name="$1"
    
    print_warning "Destroying environment: ${env_name}"
    echo ""
    read -p "Are you sure you want to destroy this environment? (yes/no): " confirm
    
    if [ "$confirm" = "yes" ]; then
        print_info "Destroying environment..."
        
        if terraform destroy -auto-approve; then
            print_success "Environment destroyed successfully"
            rm -f "${TFVARS_FILE}"
            rm -f tfplan
            return 0
        else
            print_error "Destroy failed"
            return 1
        fi
    else
        print_info "Destroy cancelled"
        return 1
    fi
}

show_outputs() {
    print_info "Environment Details:"
    echo ""
    terraform output -json | jq -r '
        "Environment ID: \(.environment_id.value)",
        "Resource Group: \(.resource_group_name.value)",
        "Location: \(.location.value)",
        "Owner: \(.owner.value)",
        "TTL: \(.ttl_hours.value) hours",
        "Destroy After: \(.destroy_after.value)",
        "",
        (if .app_service_url.value then "App Service URL: \(.app_service_url.value)" else "" end),
        (if .database_fqdn.value then "Database FQDN: \(.database_fqdn.value)" else "" end),
        (if .container_registry_login_server.value then "Container Registry: \(.container_registry_login_server.value)" else "" end)
    '
    
    echo ""
    print_success "Environment is ready to use!"
    echo ""
    print_warning "Remember: This environment will be destroyed after ${TTL} hours"
    echo ""
}

save_env_info() {
    local env_name="$1"
    local info_file="${SCRIPT_DIR}/.environments/${env_name}.json"
    
    mkdir -p "${SCRIPT_DIR}/.environments"
    
    terraform output -json > "${info_file}"
    print_success "Environment info saved to ${info_file}"
}

list_environments() {
    print_info "Active Ephemeral Environments:"
    echo ""
    
    if [ ! -d "${SCRIPT_DIR}/.environments" ] || [ -z "$(ls -A ${SCRIPT_DIR}/.environments)" ]; then
        print_warning "No active environments found"
        return
    fi
    
    for env_file in "${SCRIPT_DIR}/.environments"/*.json; do
        if [ -f "$env_file" ]; then
            env_name=$(basename "$env_file" .json)
            created=$(jq -r '.created_at.value' "$env_file")
            destroy=$(jq -r '.destroy_after.value' "$env_file")
            owner=$(jq -r '.owner.value' "$env_file")
            
            echo -e "${GREEN}●${NC} ${env_name}"
            echo "  Owner: ${owner}"
            echo "  Created: ${created}"
            echo "  Expires: ${destroy}"
            echo ""
        fi
    done
}

check_expired_environments() {
    print_info "Checking for expired environments..."
    
    if [ ! -d "${SCRIPT_DIR}/.environments" ]; then
        return
    fi
    
    local now=$(date -u +%s)
    
    for env_file in "${SCRIPT_DIR}/.environments"/*.json; do
        if [ -f "$env_file" ]; then
            env_name=$(basename "$env_file" .json)
            destroy_time=$(jq -r '.destroy_after.value' "$env_file")
            destroy_epoch=$(date -d "$destroy_time" +%s 2>/dev/null || echo "0")
            
            if [ "$destroy_epoch" -lt "$now" ]; then
                print_warning "Environment '${env_name}' has expired!"
                echo "Would you like to destroy it now? (yes/no)"
                read -r response
                
                if [ "$response" = "yes" ]; then
                    ENVIRONMENT_NAME="$env_name"
                    run_terraform_destroy "$env_name"
                    rm -f "$env_file"
                fi
            fi
        fi
    done
}

# Parse command line arguments
ENVIRONMENT_NAME=""
TTL="${DEFAULT_TTL}"
OWNER="${DEFAULT_OWNER}"
LOCATION="${DEFAULT_LOCATION}"
ENABLE_DATABASE="true"
ENABLE_APP_SERVICE="true"
ENABLE_ACR="false"
DOCKER_IMAGE="nginx"
DOCKER_TAG="latest"
COST_CENTER="ephemeral-environments"
SKIP_PLAN=false
AUTO_APPROVE=false
DESTROY=false
LIST=false
CHECK_EXPIRED=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --name)
            ENVIRONMENT_NAME="$2"
            shift 2
            ;;
        --ttl)
            TTL="$2"
            shift 2
            ;;
        --owner)
            OWNER="$2"
            shift 2
            ;;
        --location)
            LOCATION="$2"
            shift 2
            ;;
        --enable-database)
            ENABLE_DATABASE="true"
            shift
            ;;
        --enable-app-service)
            ENABLE_APP_SERVICE="true"
            shift
            ;;
        --enable-acr)
            ENABLE_ACR="true"
            shift
            ;;
        --no-database)
            ENABLE_DATABASE="false"
            shift
            ;;
        --no-app-service)
            ENABLE_APP_SERVICE="false"
            shift
            ;;
        --docker-image)
            DOCKER_IMAGE="$2"
            shift 2
            ;;
        --docker-tag)
            DOCKER_TAG="$2"
            shift 2
            ;;
        --cost-center)
            COST_CENTER="$2"
            shift 2
            ;;
        --skip-plan)
            SKIP_PLAN=true
            shift
            ;;
        --auto-approve)
            AUTO_APPROVE=true
            shift
            ;;
        --destroy)
            DESTROY=true
            shift
            ;;
        --list)
            LIST=true
            shift
            ;;
        --check-expired)
            CHECK_EXPIRED=true
            shift
            ;;
        -h|--help)
            show_usage
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            ;;
    esac
done

# Main execution
main() {
    print_banner
    
    # Handle special commands
    if [ "$LIST" = true ]; then
        list_environments
        exit 0
    fi
    
    if [ "$CHECK_EXPIRED" = true ]; then
        check_expired_environments
        exit 0
    fi
    
    # Validate required parameters
    if [ -z "$ENVIRONMENT_NAME" ]; then
        print_error "Environment name is required"
        show_usage
    fi
    
    # Validate TTL
    if [ "$TTL" -lt 1 ] || [ "$TTL" -gt 168 ]; then
        print_error "TTL must be between 1 and 168 hours"
        exit 1
    fi
    
    check_prerequisites
    init_terraform
    
    if [ "$DESTROY" = true ]; then
        run_terraform_destroy "$ENVIRONMENT_NAME"
        rm -f "${SCRIPT_DIR}/.environments/${ENVIRONMENT_NAME}.json"
        exit 0
    fi
    
    create_tfvars "$ENVIRONMENT_NAME" "$TTL" "$OWNER" "$LOCATION" \
                  "$ENABLE_DATABASE" "$ENABLE_APP_SERVICE" "$ENABLE_ACR" \
                  "$DOCKER_IMAGE" "$DOCKER_TAG" "$COST_CENTER"
    
    if [ "$SKIP_PLAN" = false ]; then
        if ! run_terraform_plan; then
            exit 1
        fi
    fi
    
    if ! run_terraform_apply "$AUTO_APPROVE"; then
        exit 1
    fi
    
    show_outputs
    save_env_info "$ENVIRONMENT_NAME"
    
    print_info "To destroy this environment manually, run:"
    echo "  $0 --name ${ENVIRONMENT_NAME} --destroy"
    echo ""
}

# Run main function
main